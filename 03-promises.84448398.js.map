{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAE3C,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IA8BPR,EAAKgB,iBAAiB,UA1BD,SAAAC,GACnBA,EAAMC,iBAGN,IAFA,IAAMC,EAAgB,GAEbC,EAAI,EAAGA,EAAIC,SAAShB,EAAYiB,OAAQF,IAAK,CACpD,IAAMG,EAAcH,EAAI,EAClBI,EAAWH,SAASlB,EAAWmB,OAASF,EAAIC,SAASjB,EAAUkB,OAErEH,EAAcM,KAAKnB,EAAciB,EAAaC,G,CAGhDL,EAAcO,SAAQ,SAAAC,GACpBA,EACGC,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBsB,EAAAhC,GAASiC,OAAOC,QACd,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAGjD0B,OAAM,SAAAL,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBsB,EAAAhC,GAASiC,OAAOI,QACd,sBAAqCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst submitAction = event => {\n  event.preventDefault();\n  const promisesFinal = [];\n\n  for (let i = 0; i < parseInt(amountInput.value); i++) {\n    const positionFor = i + 1;\n    const delayFor = parseInt(delayInput.value) + i * parseInt(stepInput.value);\n\n    promisesFinal.push(createPromise(positionFor, delayFor));\n  }\n\n  promisesFinal.forEach(promise => {\n    promise\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  });\n};\n\nform.addEventListener('submit', submitAction);\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","promisesFinal","i","parseInt","value","positionFor","delayFor","push","forEach","promise","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.84448398.js.map"}